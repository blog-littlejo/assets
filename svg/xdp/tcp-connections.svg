<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 360 170" width="100%" height="auto">
  <!-- Fond -->
  <rect x="0" y="0" width="360" height="170" rx="10" ry="10"
        fill="#fff2cc" stroke="#d6b656" fill-opacity="0.1" stroke-opacity="0.2"/>

  <g id="laptop" transform="translate(40, 70)">
    <!-- Écran -->
    <path d="M43.02 25.01 L4.98 25.01 L4.98 1.5 C4.98 0.68 5.66 0 6.49 0 L41.51 0 C42.34 0 43.02 0.68 43.02 1.5 Z"
          fill="#dae8fc" fill-opacity="0.5"/>
    <!-- Base / clavier -->
    <path d="M48 25.92 L27.27 25.92 L27.27 26.2 C27.27 26.52 27.01 26.78 26.69 26.78 L21.31 26.78
             C20.99 26.78 20.73 26.52 20.73 26.2 L20.73 25.92 L0 25.92 L0 26.66 C0 27.4 0.6 28 1.33 28
             L46.67 28 C47.4 28 48 27.4 48 26.66 Z M41.37 1.65 L41.37 23.36 L6.63 23.36 L6.63 1.65 Z
             M41.51 0 L6.49 0 C5.66 0 4.98 0.68 4.98 1.5 L4.98 25.01 L43.02 25.01 L43.02 1.5
             C43.02 0.68 42.34 0 41.51 0 Z" fill="#dae8fc"/>
  </g>

  <g id="server" transform="translate(265, 45)">
<rect x="0" y="0" width="45" height="78" fill="none" stroke="none" pointer-events="all"/><path d="M 42.41 0.16 L 2.59 0.16 C 1.16 0.16 0 1.33 0 2.76 L 0 75.25 C 0 76.68 1.16 77.84 2.59 77.84 L 42.41 77.84 C 43.84 77.84 45 76.68 45 75.25 L 45 2.76 C 45 1.33 43.84 0.16 42.41 0.16 Z M 3.53 74.31 L 3.53 3.69 L 41.47 3.69 L 41.47 74.31 Z M 7.83 11.62 L 37.17 11.62 L 37.17 8.09 L 7.83 8.09 Z M 7.83 19.16 L 37.17 19.16 L 37.17 15.63 L 7.83 15.63 Z M 7.83 26.98 L 37.17 26.98 L 37.17 23.45 L 7.83 23.45 Z M 7.83 34.61 L 37.17 34.61 L 37.17 31.08 L 7.83 31.08 Z" fill-opacity="0.9" fill="#f8cecc" stroke="none" pointer-events="all" style="fill: rgb(248, 206, 204);"/>
  </g>

  <!-- Câble -->
  <line x1="88" y1="84" x2="260" y2="84" stroke="#aaa" stroke-width="5" fill-opacity="0.9" />

  <!-- Paquets animés -->
  <g id="packets"></g>

  <!-- Labels -->
  <text id="label" x="180" y="30" font-family="Arial" font-size="14" text-anchor="middle" ></text>

  <script><![CDATA[
    const packetsLayer = document.getElementById("packets");
    const label = document.getElementById("label");

    const clientRight = 88;          // bordure droite client
    const serverLeft = 260 - 30;   // bordure gauche serveur

    const red = "#b85450";
    const red_light = "#f8cecc";
    const blue = "#6c8ebf"; 
    const blue_light = "#dae8fc"; 
    const green = "#82B366"; 
    const green_light = "#D5E8D4"; 
    const orange = "#D79B00";
    const orange_light = "#FFE6CC"; 
    const purple = "#9673A6";
    const purple_light = "#E1D5E7"; 


    function createPacket(color, text, startX) {
      const g = document.createElementNS("http://www.w3.org/2000/svg","g");
      g.setAttribute("transform", `translate(${startX},0)`);

      const r = document.createElementNS("http://www.w3.org/2000/svg","rect");
      r.setAttribute("x", 0);
      r.setAttribute("y", 76);
      r.setAttribute("width", 30);
      r.setAttribute("height", 16);
      r.setAttribute("rx", 3);
      r.setAttribute("fill", color);
      r.setAttribute("fill-opacity", 0.7);
      g.appendChild(r);

      const t = document.createElementNS("http://www.w3.org/2000/svg","text");
      t.setAttribute("x", 15);
      t.setAttribute("y", 86);
      t.setAttribute("text-anchor","middle");
      t.setAttribute("font-size","7");
      t.setAttribute("fill","white");
      r.setAttribute("fill-opacity", 0.9);
      t.textContent = text;
      g.appendChild(t);

      packetsLayer.appendChild(g);
      return g;
    }

    function animatePacket(pkt, fromX, toX, dur) {
      return new Promise(resolve=>{
        const start = performance.now();
        function step(ts){
          const p = Math.min(1,(ts-start)/(dur*1000));
          const x = fromX + (toX-fromX)*p;
          pkt.setAttribute("transform",`translate(${x},0)`);
          if(p<1) requestAnimationFrame(step);
          else {
            pkt.setAttribute("transform",`translate(${toX},0)`);
            requestAnimationFrame(()=>{ if (pkt.parentNode) packetsLayer.removeChild(pkt); resolve(); });
          }
        }
        requestAnimationFrame(step);
      });
    }

    async function runCycle(){
      // Handshake
      label.textContent = "Establish Connection";
      label.setAttribute("fill", orange);
      label.setAttribute("fill-opacity", 0.9);
      //label.textContent = "SYN";
      await animatePacket(createPacket(orange,"SYN", clientRight), clientRight, serverLeft, 1.2);

      //label.textContent = "SYN-ACK";
      label.setAttribute("fill", purple);
      await animatePacket(createPacket(purple,"SYN-ACK", serverLeft), serverLeft, clientRight, 1.2);

      //label.textContent = "ACK";
      label.setAttribute("fill", green);
      await animatePacket(createPacket(green,"ACK", clientRight), clientRight, serverLeft, 1.2);

      await new Promise(r=>setTimeout(r,500));
      // Data Transfer (serveur → client)
      label.textContent = "Data Transfer";
      for(let i=0;i<3;i++){
        label.setAttribute("fill", red);
        await animatePacket(createPacket(red,"DATA", serverLeft), serverLeft, clientRight, 1.2);
        label.setAttribute("fill", blue);
        await animatePacket(createPacket(blue,"ACK", clientRight), clientRight, serverLeft, 1.0);
      }
      label.setAttribute("fill", orange);
      label.textContent = "Closing Connection";
      await new Promise(r=>setTimeout(r,500));

      // 4-way close
      // label.textContent = "FIN";
      await animatePacket(createPacket(orange,"FIN", clientRight), clientRight, serverLeft, 1.2);

      //label.textContent = "ACK";
        label.setAttribute("fill", green);
      await animatePacket(createPacket(green,"ACK", serverLeft), serverLeft, clientRight, 1.0);

      //label.textContent = "FIN";

        label.setAttribute("fill", orange);
      await animatePacket(createPacket(orange,"FIN", serverLeft), serverLeft, clientRight, 1.2);

      //label.textContent = "ACK";
        label.setAttribute("fill", green);
      await animatePacket(createPacket(green,"ACK", clientRight), clientRight, serverLeft, 1.0);

        label.setAttribute("fill", "black");
      label.textContent = "Closed Connection";

      await new Promise(r=>setTimeout(r,1500));
      label.textContent = "";
      runCycle();
    }

    runCycle();
  ]]></script>
</svg>

